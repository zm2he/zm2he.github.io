{"version":3,"sources":["config.js","App.js","reportWebVitals.js","index.js"],"names":["config","key","defaultValue","dataString","window","localStorage","getItem","JSON","parse","getConfig","serverUrl","App","props","state","settingsVisible","editingConfig","imageUploaded","srcImage","dstImage","uploadFileList","getUploadProps","bind","onUpdateConfig","onConfigUpdated","onUploadImage","accept","showUploadList","beforeUpload","file","type","size","message","error","this","setState","reader","FileReader","addEventListener","url","result","readAsDataURL","formData","FormData","append","fetch","method","body","then","resp","blob","URL","createObjectURL","name","e","target","value","Object","entries","undefined","setItem","stringify","setConfig","style","margin","onChange","display","flex","onClick","fileList","icon","UploadOutlined","src","className","alt","LoadingOutlined","menu","item","FileSaver","saveAs","Item","overlay","placement","arrow","title","visible","onVisibleChange","content","renderSettings","trigger","SettingOutlined","renderUploadButton","renderSrcImage","renderDstImage","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8cda30e2.chunk.js","sourcesContent":["/*\r\n  Bruce's project\r\n  Copyright (c) 2021 brucehe<bruce.he.62@gmail.com>\r\n  \r\n  See LICENSE.txt for more information\r\n*/\r\n\r\n\r\n// get/set/delete (key, value) pair to localStorage\r\nexport function getConfig(key, defaultValue) {\r\n  if (key) {\r\n    const dataString = window.localStorage?.getItem(key);\r\n    if (dataString) {\r\n      return JSON.parse(dataString);\r\n    }\r\n  }\r\n  return defaultValue;\r\n}\r\n\r\nexport function setConfig(key, value) {\r\n  if (key && value !== undefined && value !== null) {\r\n    window.localStorage?.setItem(key, JSON.stringify(value));\r\n  }\r\n}\r\n\r\nexport function removeConfig(key) {\r\n  if (key) {\r\n    window.localStorage?.removeItem(key);\r\n  }\r\n}\r\n\r\nconst config = getConfig(\"config\", {\r\n  serverUrl: \"http://localhost\",\r\n});\r\n\r\nexport default config;\r\n","/*\n  Bruce's project\n  Copyright (c) 2021 brucehe<bruce.he.62@gmail.com>\n  \n  See LICENSE.txt for more information\n*/\n\nimport React from \"react\";\nimport \"antd/dist/antd.css\";\nimport { Input, Button, Upload, message, Popover, Dropdown, Menu } from \"antd\";\nimport {\n  UploadOutlined,\n  SettingOutlined,\n  LoadingOutlined,\n} from \"@ant-design/icons\";\nimport FileSaver from \"file-saver\";\n\nimport \"./App.css\";\nimport config, { setConfig } from \"./config\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      settingsVisible: false, // a flag indicates whether Settings page is visible or not\n      editingConfig: {}, // config in editting, so to not touch the actual config in case user wants to cancel the changes\n      imageUploaded: false,\n      srcImage: {},\n      dstImage: {},\n    };\n\n    // uploadeFileList is used by the antd module for uploading images, refer to antd website for more info\n    this.uploadFileList = [];\n\n    // bind functions\n    this.getUploadProps = this.getUploadProps.bind(this);\n    this.onUpdateConfig = this.onUpdateConfig.bind(this);\n    this.onConfigUpdated = this.onConfigUpdated.bind(this);\n    this.onUploadImage = this.onUploadImage.bind(this);\n  }\n\n  /**\n   * upload properties required by antd, please refer to antd website for more info\n   * note that we only accept jpeg/png, and maximum 10m images\n   *   - in the future we may use configuration instead of a hard-coded value\n   * once successfully uploaded, we simply add the image info (from response)\n   * to this.state.images without calling getImageList again\n   */\n  getUploadProps() {\n    return {\n      accept: \"image/*\",\n      showUploadList: false,\n\n      beforeUpload: (file) => {\n        const isJpgOrPng =\n          file.type === \"image/jpeg\" || file.type === \"image/png\";\n        if (!isJpgOrPng) {\n          message.error(\"You can only upload JPG/PNG file!\");\n          return false;\n        }\n        const isLt2M = file.size / 1024 / 1024 < 10;\n        if (!isLt2M) {\n          message.error(\"Image must smaller than 10MB!\");\n          return false;\n        }\n\n        this.onUploadImage(file);\n        return false;\n      },\n    };\n  }\n\n  onUploadImage(file) {\n    this.setState({ srcImage: {}, dstImage: {}, imageUploaded: true });\n    const reader = new FileReader();\n    reader.addEventListener(\n      \"load\",\n      () => {\n        // convert image file to base64 string\n        this.setState({ srcImage: { url: reader.result } });\n      },\n      false\n    );\n    reader.readAsDataURL(file);\n\n    const formData = new FormData();\n    formData.append(\"image\", file);\n    fetch(`${config.serverUrl}/image/cartoon`, {\n      method: \"POST\",\n      body: formData,\n    })\n      .then((resp) => {\n        return resp.blob();\n      })\n      .then((blob) => {\n        this.setState({ dstImage: { blob, url: URL.createObjectURL(blob) } });\n      });\n  }\n\n  /**\n   * save temporarily modified configuration to editingConfig\n   * we don't save it directly to config because user may cancel the settings\n   * @param {*} name\n   * @param {*} e\n   */\n  onUpdateConfig(name, e) {\n    const editingConfig = { ...this.state.editingConfig };\n    editingConfig[name] = e.target.value;\n    this.setState({ editingConfig });\n  }\n\n  /**\n   * so user decides to permanently change the configuration\n   */\n  onConfigUpdated() {\n    const { editingConfig } = this.state;\n    for (let [key, value] of Object.entries(editingConfig)) {\n      config[key] = value;\n    }\n    setConfig(\"config\", config);\n  }\n\n  renderSettings() {\n    const { editingConfig } = this.state;\n    return (\n      <div style={{ margin: \"8px\" }}>\n        <Input\n          style={{ margin: \"16px\" }}\n          value={editingConfig.serverUrl}\n          onChange={(e) => this.onUpdateConfig(\"serverUrl\", e)}\n        />\n        <div style={{ display: \"flex\" }}>\n          <span style={{ flex: \"auto\" }} />\n          <Button onClick={(e) => this.setState({ settingsVisible: false })}>\n            Cancel\n          </Button>\n          <Button\n            type=\"primary\"\n            style={{ margin: \"0 0 0 16px\" }}\n            onClick={(e) => {\n              this.setState({ settingsVisible: false });\n              this.onConfigUpdated(false);\n            }}\n          >\n            OK\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  /**\n   * utilize antd's Upload component, here we use a very simply implementation,\n   * there are many other fancy implementations, such as preview, can be found in antd's website\n   * @param {*} type\n   */\n  renderUploadButton() {\n    const { imageUploaded } = this.state;\n    return (\n      <Upload {...this.getUploadProps()} fileList={this.uploadFileList}>\n        <Button\n          icon={<UploadOutlined />}\n          onClick={() => {\n            this.uploadFileList = [];\n          }}\n          style={{ margin: \"16px 16px 0 0\" }}\n        >\n          {imageUploaded ? \"Upload another image?\" : \"Upload an image\"}\n        </Button>\n      </Upload>\n    );\n  }\n\n  renderSrcImage() {\n    const {\n      srcImage: { url },\n    } = this.state;\n    if (url) {\n      return <img src={url} className=\"img-container\" alt=\"\" />;\n    }\n    return (\n      <div>\n        Loading image....\n        <LoadingOutlined />\n      </div>\n    );\n  }\n\n  renderDstImage() {\n    const {\n      dstImage: { blob, url },\n    } = this.state;\n    if (url) {\n      const menu = (\n        <Menu\n          onClick={({ item, key }) => {\n            FileSaver.saveAs(blob, \"imgutil.jpeg\");\n          }}\n        >\n          <Menu.Item key=\"download\">Download</Menu.Item>\n        </Menu>\n      );\n\n      return (\n        <Dropdown overlay={menu} placement=\"bottomCenter\" arrow>\n          <img src={url} className=\"img-container\" alt=\"\" />\n        </Dropdown>\n      );\n    }\n\n    return (\n      <div>\n        Working hard on it....\n        <LoadingOutlined />\n      </div>\n    );\n  }\n\n  render() {\n    const { settingsVisible, imageUploaded } = this.state;\n    return (\n      <div className=\"app\">\n        <div style={{ display: \"flex\" }}>\n          <span className=\"app-title\">\n            Bruce's Image Utilities - Cartoonize Image\n          </span>\n          <span style={{ flex: \"auto\" }} />\n          <Popover\n            placement=\"topLeft\"\n            title={\"Settings\"}\n            visible={settingsVisible}\n            onVisibleChange={(visible) => {\n              this.setState({\n                editingConfig: { ...config },\n                settingsVisible: visible,\n              });\n            }}\n            content={this.renderSettings.bind(this)}\n            trigger=\"click\"\n          >\n            <SettingOutlined />\n          </Popover>\n        </div>\n        {this.renderUploadButton()}\n        <div>\n          {imageUploaded && this.renderSrcImage()}\n          {imageUploaded && this.renderDstImage()}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","/*\n  Bruce's project\n  Copyright (c) 2021 brucehe<bruce.he.62@gmail.com>\n  \n  See LICENSE.txt for more information\n*/\n\nconst reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/*\n  Bruce's project\n  Copyright (c) 2021 brucehe<bruce.he.62@gmail.com>\n  \n  See LICENSE.txt for more information\n*/\n\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}