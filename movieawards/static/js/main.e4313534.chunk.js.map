{"version":3,"sources":["config.js","omdbApi.js","App.js","reportWebVitals.js","index.js"],"names":["setFromLocalStorage","key","value","undefined","window","localStorage","setItem","JSON","stringify","config","MAX_NOMINATIONS","OMDBAPI_KEY","process","REACT_APP_OMDBAPI_KEY","searchMovie","query","page","fetch","method","headers","Accept","Host","then","resp","json","App","props","state","nominees","searchedMovies","maxPages","queryToUse","searching","onSearch","bind","switchPage","desiredPage","this","setState","Search","Response","Math","ceil","totalResults","catch","error","storedNominees","defaultVal","strVal","getItem","parse","getFromLocalStorage","className","placeholder","prefix","SearchOutlined","onChange","e","target","onPressEnter","movie","action","Title","Year","Poster","startsWith","src","alt","length","findIndex","nominee","imdbID","type","disabled","canNotNominate","onClick","updatedNominees","style","flex","LeftOutlined","margin","RightOutlined","title","LoadingOutlined","renderPageSwitch","map","renderMovie","renderNominateButton","filter","renderRemoveButton","message","banner","renderSearchBar","display","width","renderMovieList","renderNomineeList","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e4313534.chunk.js","sourcesContent":["let config = {\r\n    MAX_NOMINATIONS: 5,\r\n    OMDBAPI_KEY: process.env.REACT_APP_OMDBAPI_KEY || \"bca002b0\"\r\n}\r\n\r\n// get key-value pair from local storage\r\nexport function getFromLocalStorage(key, defaultVal) {\r\n    if (key) {\r\n        const strVal = window.localStorage?.getItem(key);\r\n        if (strVal) {\r\n            return JSON.parse(strVal);\r\n        }\r\n    }\r\n    return defaultVal;\r\n}\r\n\r\n// set key-value pair from local storage\r\nexport function setFromLocalStorage(key, value) {\r\n    if (key !== undefined && key !== null) {\r\n        window.localStorage?.setItem(key, JSON.stringify(value));\r\n    }\r\n}\r\n\r\n// delete key-value pair from local storage\r\nexport function removeFromLocalStorage(key) {\r\n    if (key) {\r\n        window.localStorage?.removeItem(key);\r\n    }\r\n}\r\n\r\nexport default config;","import config from \"./config.js\"\r\n\r\n/**\r\n * Search movies by OMDb API at http://www.omdbapi.com/\r\n * @param {*} query Query string to search for\r\n * @param {*} page Page to search for\r\n */\r\nexport function searchMovie (query, page) {\r\n    return fetch(`https://www.omdbapi.com/?s=${query}&page=${page}&type=movie&r=json&apikey=${config.OMDBAPI_KEY}`,\r\n    {\r\n        method: \"GET\",\r\n        headers: {\r\n            Accept: \"application/json\",\r\n            Host: \"www.omdbapi.com\"\r\n        }\r\n    }\r\n    ).then(resp=>resp.json())\r\n}","import React from \"react\"\nimport \"antd/dist/antd.css\";\nimport { Alert, Input, Button } from \"antd\";\nimport {LoadingOutlined, LeftOutlined, RightOutlined, SearchOutlined} from \"@ant-design/icons\";\n\nimport './App.css';\nimport {searchMovie} from \"./omdbApi.js\";\nimport config, {getFromLocalStorage, setFromLocalStorage} from \"./config.js\"\n\nclass App extends React.Component {\n  constructor (props) {\n    super(props);\n    this.state = {\n      nominees: [],\n      searchedMovies: [],\n      page: 1,\n      maxPages: 0,\n      query: \"\",\n      queryToUse: \"\",\n      searching: false\n    }\n    this.onSearch = this.onSearch.bind(this);\n  }\n\n  /**\n   * Queries movies based on title.\n   * @param {*} switchPage True if we want to switch from one page\n   *                       to the next without changing the query string.\n   *                       False if we want to make a new query, resetting\n   *                       page to 1.\n   * @param {*} desiredPage The page to query\n   */\n  onSearch(switchPage = false, desiredPage = 1) {\n    const page = switchPage ? desiredPage : 1;\n    const query = switchPage ? this.state.queryToUse : this.state.query;\n\n    this.setState({ searching: true });\n    if (!switchPage) {\n      this.setState({ queryToUse: query });\n    }\n\n    searchMovie(query, page)\n      .then((resp) => {\n        this.setState({\n          searchedMovies: resp.Search || [],\n          searching: false,\n          maxPages: resp.Response === \"True\" ? Math.ceil(resp.totalResults/10) : 0,\n          page: page\n       });\n      })\n      .catch((error) => {\n        this.setState({searching: false});\n      });\n  }\n\n  componentDidMount() {\n    const storedNominees = getFromLocalStorage(\"config#nominations\", []);\n    this.setState({ nominees: storedNominees });\n  }\n\n  // Search bar to search movies\n  renderSearchBar() {\n    return(\n      <div className=\"search-bar\">\n        <div className=\"search-bar-title\">Movie Title</div>\n        <Input\n          placeholder=\"search movies\"\n          prefix={<SearchOutlined/>}\n          value={this.state.query}\n          onChange={(e) => this.setState({ query: e.target.value })}\n          onPressEnter={(e) => this.onSearch()}\n        />\n      </div>\n    );\n  }\n\n  // Displays a movie with an action (nominate or remove)\n  renderMovie(key, movie, action) {\n    const {Title, Year, Poster} = movie;\n    return(\n      <div className=\"movie\" key={key}>\n        {(Poster?.startsWith(\"http://\") || Poster?.startsWith(\"https://\")) &&\n          (<img className=\"movie-img\" src={Poster} alt={Title}/>)}\n        <div className=\"movie-content\">\n          <div className=\"movie-title\">{`${Title} (${Year})`}</div>\n          {action || \"\"}\n        </div>\n      </div>\n    );\n  }\n\n  // Checks if a movie is already nominated or if max nominations is exceeded\n  canNotNominate(movie) {\n    if (this.state.nominees.length >= config.MAX_NOMINATIONS) {\n      return true;\n    }\n\n    if (this.state.nominees.findIndex((nominee) => nominee.imdbID === movie.imdbID) !== -1) {\n      return true;\n    }\n\n    return false;\n  }\n\n  // Nominate button for each listed movie\n  renderNominateButton(movie) {\n    return(\n      <Button\n        className=\"clickable action-button\"\n        type=\"primary\"\n        disabled={this.canNotNominate(movie)}\n        onClick={(e) => {\n          const updatedNominees = [...this.state.nominees, movie];\n          this.setState({ nominees: updatedNominees });\n          setFromLocalStorage(\"config#nominations\", updatedNominees);\n        }}\n      >\n        Nominate\n      </Button>\n    );\n  }\n\n  // Displays the arrow keys to switch between pages\n  renderPageSwitch() {\n    return(\n      <div className=\"switch-page\">\n        <span style={{flex: 'auto'}} />\n        <Button\n          disabled={this.state.page - 1 < 1}\n          onClick={(e) => this.onSearch(true, this.state.page - 1)}\n        >\n          <LeftOutlined/>\n        </Button>\n        <h3 style={{margin: \"0 10px 0 10px\" }}>{`${this.state.page}/${this.state.maxPages}`}</h3>\n        <Button\n          disabled={this.state.page + 1 > this.state.maxPages}\n          onClick={(e) => this.onSearch(true, this.state.page + 1)}\n        >\n          <RightOutlined/>\n        </Button>\n      </div>\n    );\n  }  \n\n  // List of movies to search\n  renderMovieList() {\n    // Title displays message to send to user\n    let title = \"\";\n    if (this.state.searching) {\n      title = (<>\n        <span>{`Searching ${this.state.queryToUse}`}</span>\n        <LoadingOutlined/>\n      </>)\n    } else if (this.state.queryToUse === \"\") {\n      if (this.state.query === \"\") {\n        title = (\n          <span>{`Nothing searched yet.`}</span>\n        );\n      } else {\n        title = (\n          <span>{`Press ENTER to search \"${this.state.query}\"`}</span>\n        )\n      }\n    } else if (this.state.maxPages <= 0) {\n      title = (\n        <span>{`Nothing matches \"${this.state.queryToUse}\".`}</span>\n      );\n    } else {\n      title=(\n        <span>{`Results for ${this.state.queryToUse}`}</span>\n      )\n    }\n\n    return(\n      <div>\n        <div className=\"section-title\">{title}</div>\n        {\n          this.state.maxPages > 1 &&\n          <div>{this.renderPageSwitch()}</div>\n        }\n        {this.state.searchedMovies.map((movie) => this.renderMovie(\n          `search#${movie.imdbID}`, movie, this.renderNominateButton(movie)\n        ))}\n      </div>\n    );\n  }\n\n  // Button to remove a nominee\n  renderRemoveButton(movie) {\n    return(\n      <Button\n        className=\"clickable action-button\"\n        type=\"primary\"\n        onClick={(e) => {\n          const updatedNominees = this.state.nominees.filter(\n            (nominee) => nominee.imdbID !== movie.imdbID\n          );\n          this.setState({ nominees: updatedNominees });\n          setFromLocalStorage(\"config#nominations\", updatedNominees);\n        }}\n      >\n        Remove\n      </Button>\n    );\n  }\n\n  // List of movie nominees\n  renderNomineeList() {\n    return(\n      <div>\n        <div className=\"section-title\">{`Nominations (${this.state.nominees.length}/${config.MAX_NOMINATIONS})`}</div>\n        {this.state.nominees.map((movie) => this.renderMovie(\n          `nominee#${movie.imdbID}`, movie, this.renderRemoveButton(movie)\n        ))}\n      </div>\n    );\n  }\n\n  render () {\n    return (\n      <div className=\"App\">\n        {\n          this.state.nominees.length === config.MAX_NOMINATIONS &&\n          <Alert message=\"You have now selected all 5 nominees.\" type=\"success\" banner />\n        }\n        <div className=\"App-title\">The Shoppies</div>\n        \n        <div \n          className=\"section\"\n          style={{margin: \"8px 0 8px 0\"}}\n        >\n          {this.renderSearchBar()}\n        </div>\n\n        <div style={{display: \"flex\"}}>\n          <div\n            className=\"section\"\n            style={{ width: \"50%\", margin: \"32px 16px 32px 0\" }}\n          >\n            {this.renderMovieList()}\n          </div>\n          <div\n            className=\"section\"\n            style={{ width: \"50%\", margin: \"32px 0 32px 16px\" }}\n          >\n            {this.renderNomineeList()}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}